generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id          String   @id @default(cuid())
    userId      String   @unique
    name        String
    email       String
    parentEmail String
    phoneNumber String
    address     String
    city        String
    state       String
    zipCode     String
    lab         String?
    country     String
    school      String
    gradeLevel  String
    forms       String[]
    user        User     @relation(fields: [userId], references: [id])
}

model User {
    id               String        @id @default(cuid())
    name             String?
    email            String?       @unique
    password         String?
    resetToken       String?
    resetTokenExpiry DateTime?
    isAdmin          Boolean       @default(false)
    profile          Profile?
    applications     Application[]
}

model Application {
    id                      String                   @id @default(cuid())
    userId                  String                   @unique
    user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    name                    String?
    email                   String?
    school                  String?
    udlStudent              Boolean                  @default(false)
    gradeLevel              String?
    yearsOfExperience       String?
    numTournaments          String?
    debateExperience        String?                  @db.Text
    interestEssay           String?                  @db.Text
    selfAptitudeAssessment  String?                  @db.Text
    status                  ApplicationStatus        @default(IN_PROGRESS)
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    programConfirmation     ProgramConfirmation?
    FinancialAidApplication FinancialAidApplication?
}

model ProgramConfirmation {
    id                     String      @id @default(cuid())
    applicationId          String      @unique
    studentName            String
    parentName             String
    emergencyContact       String
    dietaryRestrictions    String      @default("")
    medicalConditions      String      @default("")
    healthInsuranceCarrier String      @default("")
    groupPolicyNumber      String      @default("")
    liabilityWaiver        Boolean
    medicalRelease         Boolean
    mediaRelease           Boolean
    programGuidelines      Boolean
    financialAidRequest    Boolean     @default(false)
    additionalNotes        String      @default("")
    submittedAt            DateTime
    createdAt              DateTime    @default(now())
    updatedAt              DateTime    @updatedAt
    application            Application @relation(fields: [applicationId], references: [id])

    @@index([applicationId])
}

model FinancialAidApplication {
    id                 String      @id @default(cuid())
    applicationId      String      @unique
    application        Application @relation(fields: [applicationId], references: [id])
    dependents         String      @default("")
    householdIncome    String      @default("")
    receivedAssistance Boolean     @default(false)
    circumstances      String      @db.Text
    willProvideReturns Boolean     @default(false)
    submittedAt        DateTime    @default(now())
    updatedAt          DateTime    @updatedAt
    status             String?     @default("PENDING") // PENDING, APPROVED, DENIED

    @@index([applicationId])
}

enum ApplicationStatus {
    IN_PROGRESS
    SUBMITTED
    ACCEPTED
    WAITLISTED
    DENIED
    WITHDRAWN
    CONFIRMED
    COMPLETED
}
